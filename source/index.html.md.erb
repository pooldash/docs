---
title: API Reference

toc_footers:
  - <a href='https://gazzini.com/essays/posts/tools'>Build transparent tools</a>
  - Documentation Powered by <a href='https://github.com/slatedocs/slate'>Slate</a>

search: true

code_clipboard: true
---

# Formulas

Pooldash "formulas" are a way to codify poolcare workflows so they can be used, inspected, and remixed by anybody. 

At its core, each formula defines an arbitrary list of readings and treatments (think "inputs and outputs"). Each treatment has a function that will calculate whether the treatment is required, and (if necessary) how much of it.

Our [iOS](https://apps.apple.com/us/app/pooldash-water-calculator/id1505607801#?platform=iphone) and [Android](https://play.google.com/store/apps/details?id=com.gazzini.pooldash&hl=en_US&gl=US) apps provide a simple interface to execute these formulas. Most of our users don't really understand what formulas are, they just load them in the app and follow the instructions.

You can inspect formulas using the online editor [here](https://app.pooldash.com/formula/vast_argument_756/edit#t-calc_hypo). If you want to make your own, you'll need to create a free account and remix an existing formula. They're all MIT-licensed, so you can fork whichever one(s) you want.

Below is a reference for all the properties of a formula. If you have suggestions for improvement, please post it [in the forum](https://forum.pooldash.com). Similarly, if you think these docs could be improved, submit a pull-request [on Github](https://github.com/pooldash/docs).


## Readings

Each reading will appear as a slider in the user's app, with the option to type into the text-field as well. View an example [here](https://app.pooldash.com/formula/vast_argument_756/edit#r-fc).

<%= image_tag("images/reading.jpg", alt: "a slider and a text-field that both represent a free chlorine reading", width: 320) %>

These are exposed to treatment-functions on the `r` object.

```javascript
const exampleReading = {
  display_name: "Free Chlorine",
  var: "fc",
  default_value: 3.0,
  units: "ppm",
  sliderMin: 0,
  sliderMax: 7,
  decimalPlaces: 1,
  is_default_on: true
}
```

| Property | Description |
| -------- | ----------- ||
| Display Name       | This is the name users will see above the slider & next to the text-field.                                                                                       |
| Var Name           | This will be the key used on the `r` object that treatment-functions use to get the value of this reading.                                                                   |
| Default Value      | The first time somebody uses this formula, this will be the initial value of the slider and text-field.                                                           |
| Units              | Any string representing the units for this value (usually "ppm" or nothing)                                                                                      |
| Slider Min         | The minimum range of the slider. Users can still use the text-field to enter a number outside this range.                                                        |
| Slider Max         | The max range of the slider.                                                                                                                                     |
| Decimal Places     | The number of significant-figures after the decimal. This doesn't currently work with negative numbers, but will in the future.                                  |
| On by Default?     | Whether this reading will be "on" the first time somebody uses this formula.                                                                                     |
| Offset Reading Var | Just leave this blank for now -- it will be used in the future to define relationships like the one between free & total chlorine, but it's not quite there yet. |


## Target Levels

Target levels expose some parameters of your formula to end-users so they can be tweaked without remixing an entirely new formula.

<%= image_tag("images/target_level.jpg", alt: "2 cards, each with a chemical name for a title, with min & max textfields", width: 350) %>

These are exposed to the treatment-functions via the `c` object.

Target levels often have the same `var` as an associated reading, but this is not a requirement (for instance, there is no reading for combined-chlorine, as it's derived). Users area also welcome to set the min & max values to the same number if no range is desired.

Your formula specifies default values for each target, and you can even customize these defaults based on the pool's wall-type.

```javascript
const exampleTargetLevel = {
  display_name: "Calcium Hardness",
  var: "ch",
  description: "This will set the target range for calcium hardness levels and affect how Calcium Chloride is dosed.",
  min: 200,
  max: 400,
  overrides: [
    wallType: 'plaster',
    min: 250,
    max: 450,
  ]
}
```

| Property | Description |
| -------- | ----------- ||
| Display Name | This is the name users will see when adjusting this value.|
| Var Name     | The key on the `c` object that the treatment can use to access these values. For example, if the var was "fc", the treatment-function could use `c.fc.min` or `c.fc.max` |
| Description  | (optional) This text will explain to the user what this parameter actually adjusts.|
| Min | The default minimum value for this target-range if no wall-type-specific default matches the given pool's wall-type.
| Min | The default maximum value for this target-range if no wall-type-specific default matches the given pool's wall-type.

Additional min & max overrides can be specified per wall-type. These can still be overridden by user edits on the client.


## Treatments

Treatments are usually chemical additions, but can also be tasks ("backwash the filter") or even calculations (like the LSI). Each treatment defines its own function that must return a single number.

<%= image_tag("images/treatment.jpg", alt: "An empty checkbox, next to the instructions to add 3.4 lbs of 67% calcium hypochlorite", width: 320) %>

These are pure functions, meaning that they should always return the same result given the same inputs. The inputs include information about the pool, the readings, target levels, and also (as a convenience) the values returned by the previous treatments. In other words, you shouldn't try to read from external data-sources, check the time, or use any other dependencies besides the parameters.

These functions are written in javascript, which is widely known as the world's best programming language.

| Property | Description |
| -------- | ----------- ||
| Display Name | This is the name users will see in the app (do not include concentration info here).|
| Var Name     | The key on the `c` object that the treatment can use to access these values. For example, if the var was "fc", the treatment-function could use `c.fc.min` or `c.fc.max` |
| Description  | (optional) This text will explain to the user what this parameter actually adjusts.|
| Min | The default minimum value for this target-range if no wall-type-specific default matches the given pool's wall-type.
| Min | The default maximum value for this target-range if no wall-type-specific default matches the given pool's wall-type.



Not all treatments are chemical, and not all readings are numerical. I tried to make pooldash sufficiently general to account for this, but if you see opportunities for improvement, please post [in the forum](https://forum.pooldash.com). Similarly, if you think these docs could be improved, submit a pull-request [on Github](https://github.com/pooldash/docs).

Below we'll list all the properties of Readings, Treatments, and Target Levels. It's probably best to just look at an actual example (here) and use these docs as a sort-of reference.

The most interesting part is the treatment functions -- each treatment (ex: Sodium Bicarbonate) has an associated javascript function.  This way, instead of writing several paragraphs of text explaining, filming a video, or building your own app just to let people use it... you can just share a link to your pooldash formula. Others can use, inspect, and even remix (fork) it for themselves.

These can be used by you, but also by anyone else around the world. Because all formulas are MIT licensed, pool nerds all over the world can remix and build on each other's formulas.

 It's increasingly difficult to read blog posts and  The goal of pooldash was to create a system where you  Because there is so much interplay between different chemi


 in a way that can be automated through the Pooldash apps. Information about what readings to take, target-levels to set, and treatments to use can be used, inspected, and forked ("remixed") by pool maintainers everywhere. I hope this will prove to be more actionable than the current standard, which is some mix of blogs, forums, and spreadsheets.

Welcome to the Pooldash docs! If you see an opportunity to improve these docs, submit a pull request [on Github](https://github.com/pooldash/docs) or post in our [forum](https://forum.pooldash.com).

All formulas are open-sourced under the MIT license. In order to create your own formula, remix one of these [here](https://app.pooldash.com/formulas).

There are 2 major sections:
> Readings
> Treatments

Each treatment has a single javascript function that receives information about the pool, the readings, target levels, and previous treatments as parameters. This function must return how much of that treatment to use (in US ounces) based on that input. It must be a pure function (it can't rely any other inputs besides the parameters passed in).

Here is some more info!

is is useful a powerful tool for formula authors to use themselves, but more importantly, it's the most actionable way to spread pool-care advice. Pool maintainers around the world can simply load your formula in their Pooldash app without understanding every bit of it.


Welcome to the pooldash API meow! You can use our API to access Kittn API endpoints, which can get information on various cats, kittens, and breeds in our database.

We have language bindings in Shell, Ruby, Python, and JavaScript! You can view code examples in the dark area to the right, and you can switch the programming language of the examples with the tabs in the top right.

This example API documentation page was created with [Slate](https://github.com/slatedocs/slate). Feel free to edit it and use it as a base for your own API's documentation.

# Authentication

> To authorize, use this code:

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
```

```shell
# With shell, you can just pass the correct header with each request
curl "api_endpoint_here" \
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
```

> Make sure to replace `meowmeowmeow` with your API key.

Kittn uses API keys to allow access to the API. You can register a new Kittn API key at our [developer portal](http://example.com/developers).

Kittn expects for the API key to be included in all API requests to the server in a header that looks like the following:

`Authorization: meowmeowmeow`

<aside class="notice">
You must replace <code>meowmeowmeow</code> with your personal API key.
</aside>

# Kittens

## Get All Kittens

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get()
```

```shell
curl "http://example.com/api/kittens" \
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let kittens = api.kittens.get();
```

> The above command returns JSON structured like this:

```json
[
  {
    "id": 1,
    "name": "Fluffums",
    "breed": "calico",
    "fluffiness": 6,
    "cuteness": 7
  },
  {
    "id": 2,
    "name": "Max",
    "breed": "unknown",
    "fluffiness": 5,
    "cuteness": 10
  }
]
```

This endpoint retrieves all kittens.

### HTTP Request

`GET http://example.com/api/kittens`

### Query Parameters

| Parameter    | Default | Description                                                                      |
| ------------ | ------- | -------------------------------------------------------------------------------- |
| include_cats | false   | If set to true, the result will also include cats.                               |
| available    | true    | If set to false, the result will include kittens that have already been adopted. |

<aside class="success">
Remember — a happy kitten is an authenticated kitten!
</aside>

## Get a Specific Kitten

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get(2)
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get(2)
```

```shell
curl "http://example.com/api/kittens/2" \
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let max = api.kittens.get(2);
```

> The above command returns JSON structured like this:

```json
{
  "id": 2,
  "name": "Max",
  "breed": "unknown",
  "fluffiness": 5,
  "cuteness": 10
}
```

This endpoint retrieves a specific kitten.

<aside class="warning">Inside HTML code blocks like this one, you can't use Markdown, so use <code>&lt;code&gt;</code> blocks to denote code.</aside>

### HTTP Request

`GET http://example.com/kittens/<ID>`

### URL Parameters

| Parameter | Description                      |
| --------- | -------------------------------- |
| ID        | The ID of the kitten to retrieve |

## Delete a Specific Kitten

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.delete(2)
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.delete(2)
```

```shell
curl "http://example.com/api/kittens/2" \
  -X DELETE \
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let max = api.kittens.delete(2);
```

> The above command returns JSON structured like this:

```json
{
  "id": 2,
  "deleted" : ":("
}
```

This endpoint deletes a specific kitten.

### HTTP Request

`DELETE http://example.com/kittens/<ID>`

### URL Parameters

| Parameter | Description                    |
| --------- | ------------------------------ |
| ID        | The ID of the kitten to delete |

